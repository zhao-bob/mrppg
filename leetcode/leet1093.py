import math
from typing import List


# 1093. 大样本统计
# 我们对 0 到 255 之间的整数进行采样，并将结果存储在数组 count 中：count[k] 就是整数 k 在样本中出现的次数。
#
# 计算以下统计数据:
#
# minimum ：样本中的最小元素。
# maximum ：样品中的最大元素。
# mean ：样本的平均值，计算为所有元素的总和除以元素总数。
# median ：
# 如果样本的元素个数是奇数，那么一旦样本排序后，中位数 median 就是中间的元素。
# 如果样本中有偶数个元素，那么中位数median 就是样本排序后中间两个元素的平均值。
# mode ：样本中出现次数最多的数字。保众数是 唯一 的。
# 以浮点数数组的形式返回样本的统计信息 [minimum, maximum, mean, median, mode] 。与真实答案误差在 10-5 内的答案都可以通过。
#
#
#
# 示例 1：
#
# 输入：count = [0,1,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
# 输出：[1.00000,3.00000,2.37500,2.50000,3.00000]
# 解释：用count表示的样本为[1,2,2,2,3,3,3,3]。
# 最小值和最大值分别为1和3。
# 均值是(1+2+2+2+3+3+3+3) / 8 = 19 / 8 = 2.375。
# 因为样本的大小是偶数，所以中位数是中间两个元素2和3的平均值，也就是2.5。
# 众数为3，因为它在样本中出现的次数最多。
# 示例 2：
#
# 输入：count = [0,4,3,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
# 输出：[1.00000,4.00000,2.18182,2.00000,1.00000]
# 解释：用count表示的样本为[1,1,1,1,2,2,3,3,3,4,4]。
# 最小值为1，最大值为4。
# 平均数是(1+1+1+1+2+2+2+3+3+4+4)/ 11 = 24 / 11 = 2.18181818…(为了显示，输出显示了整数2.18182)。
# 因为样本的大小是奇数，所以中值是中间元素2。
# 众数为1，因为它在样本中出现的次数最多。
#

class Solution:
    def sampleStats(self, count: List[int]) -> List[float]:
        minimum = maximum = -1
        median = mode = 0
        cm = 0
        c = 0
        s = 0

        for i in range(256):
            if count[i] != 0:
                if minimum == -1:
                    minimum = i
                maximum = i
                if count[i] > cm:
                    cm = count[i]
                    mode = i
                c += count[i]
                s += i * count[i]
        mean = s / c

        m = 0
        pv = -1
        for i in range(256):
            if count[i] != 0:
                m += count[i]
                if c % 2 == 1:
                    if m > c // 2:
                        median = i
                        break
                else:
                    if m == c // 2:
                        pv = i
                    elif m > c // 2:
                        if pv != -1:
                            median = (i + pv) / 2
                        else:
                            median = i
                        break
        return [minimum, maximum, mean, median, mode]


if __name__ == "__main__":
    count = [0,1,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
    test = Solution().sampleStats(count)
    print(test)
