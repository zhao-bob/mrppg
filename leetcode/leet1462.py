import collections
import heapq
import math
from bisect import bisect_right
from collections import Counter, deque
from functools import cache
from itertools import product
from typing import List, Optional


# 1462. 课程表 IV
# 提示
# 中等
# 120
# 相关企业
# 你总共需要上 numCourses 门课，课程编号依次为 0 到 numCourses-1 。你会得到一个数组 prerequisite ，其中 prerequisites[i] = [ai, bi] 表示如果你想选 bi 课程，你 必须 先选 ai 课程。
#
# 有的课会有直接的先修课程，比如如果想上课程 1 ，你必须先上课程 0 ，那么会以 [0,1] 数对的形式给出先修课程数对。
# 先决条件也可以是 间接 的。如果课程 a 是课程 b 的先决条件，课程 b 是课程 c 的先决条件，那么课程 a 就是课程 c 的先决条件。
#
# 你也得到一个数组 queries ，其中 queries[j] = [uj, vj]。对于第 j 个查询，您应该回答课程 uj 是否是课程 vj 的先决条件。
#
# 返回一个布尔数组 answer ，其中 answer[j] 是第 j 个查询的答案。
#
#
#
# 示例 1：
#
#
#
# 输入：numCourses = 2, prerequisites = [[1,0]], queries = [[0,1],[1,0]]
# 输出：[false,true]
# 解释：课程 0 不是课程 1 的先修课程，但课程 1 是课程 0 的先修课程。
# 示例 2：
#
# 输入：numCourses = 2, prerequisites = [], queries = [[1,0],[0,1]]
# 输出：[false,false]
# 解释：没有先修课程对，所以每门课程之间是独立的。
# 示例 3：
#
#
#
# 输入：numCourses = 3, prerequisites = [[1,2],[1,0],[2,0]], queries = [[1,0],[1,2]]
# 输出：[true,true]

class Solution:
    def checkIfPrerequisite(self, numCourses: int, prerequisites: List[List[int]], queries: List[List[int]]) -> List[bool]:
        m = [[False for _ in range(numCourses)] for _ in range(numCourses)]
        d = [0] * numCourses
        o = {}
        i = {}
        pr = [set() for _ in range(numCourses)]

        for p in prerequisites:
            d[p[1]] += 1
            if p[0] in o:
                o[p[0]].add(p[1])
            else:
                o[p[0]] = {p[1]}
            if p[1] in i:
                i[p[1]].add(p[0])
            else:
                i[p[1]] = {p[0]}

        q = [u for u in range(numCourses) if d[u] == 0]

        while len(q) > 0:
            u = q[0]
            q = q[1:]
            if u in o:
                for k in o[u]:
                    m[u][k] = True
                    d[k] -= 1
                    for x in pr[u]:
                        m[x][k] = True
                    pr[k] = pr[k].union(pr[u])
                    pr[k].add(u)
                    if d[k] == 0:
                        q.append(k)

        # def dfs(v, s):
        #     for n in s:
        #         m[n][v] = True
        #     if v in o:
        #         ns = s.copy()
        #         ns.add(v)
        #         for u in o[v]:
        #             dfs(u, ns)
        #
        # for v in q:
        #     dfs(v, set())

        res = [False] * len(queries)
        for i in range(len(queries)):
            res[i] = m[queries[i][0]][queries[i][1]]
        return res



if __name__ == "__main__":
    numCourses = 36
    prerequisites = [[22,17],[22,2],[22,34],[22,23],[22,20],[22,6],[22,0],[22,21],[22,32],[22,15],[22,10],[22,29],[22,4],[22,35],[27,24],[27,17],[27,25],[27,16],[27,7],[27,31],[27,28],[27,26],[27,30],[27,23],[27,6],[27,21],[27,18],[27,11],[24,8],[24,1],[24,16],[24,7],[24,34],[24,0],[24,15],[24,10],[24,4],[24,18],[24,12],[24,35],[8,17],[8,7],[8,2],[8,33],[8,28],[8,34],[8,23],[8,6],[8,0],[8,5],[8,21],[8,32],[8,9],[8,4],[8,12],[1,17],[1,25],[1,7],[1,2],[1,31],[1,26],[1,23],[1,0],[1,13],[1,15],[1,9],[1,14],[1,29],[1,18],[1,35],[17,25],[17,16],[17,2],[17,33],[17,28],[17,30],[17,23],[17,6],[17,5],[17,15],[17,9],[17,10],[17,18],[17,11],[25,16],[25,7],[25,2],[25,33],[25,31],[25,28],[25,34],[25,19],[25,23],[25,21],[25,32],[25,13],[25,14],[25,10],[25,4],[25,18],[25,12],[25,11],[16,2],[16,33],[16,26],[16,3],[16,5],[16,21],[16,32],[16,10],[16,4],[16,11],[7,33],[7,31],[7,28],[7,23],[7,21],[7,32],[7,13],[7,15],[7,4],[7,11],[2,31],[2,28],[2,26],[2,3],[2,19],[2,20],[2,6],[2,0],[2,5],[2,21],[2,32],[2,9],[2,14],[2,10],[2,18],[33,3],[33,19],[33,20],[33,5],[33,32],[33,13],[33,15],[33,9],[33,4],[33,18],[31,19],[31,21],[31,32],[31,13],[31,15],[31,9],[31,11],[28,26],[28,3],[28,34],[28,20],[28,6],[28,32],[28,13],[28,15],[28,9],[28,4],[28,18],[28,35],[28,11],[26,3],[26,34],[26,19],[26,23],[26,6],[26,32],[26,9],[26,10],[26,18],[26,12],[26,11],[30,19],[30,23],[30,20],[30,0],[30,21],[30,32],[30,15],[30,29],[30,4],[30,11],[3,19],[3,23],[3,6],[3,0],[3,5],[3,21],[3,32],[3,10],[3,29],[3,4],[3,35],[34,19],[34,6],[34,0],[34,21],[34,32],[34,13],[34,9],[34,14],[34,12],[34,11],[19,6],[19,5],[19,21],[19,14],[19,12],[23,6],[23,5],[23,13],[23,15],[23,9],[23,14],[23,29],[23,4],[23,18],[23,12],[23,35],[20,5],[20,21],[20,32],[20,15],[20,9],[20,29],[20,4],[6,0],[6,32],[6,15],[6,9],[6,10],[6,29],[6,4],[6,18],[6,11],[0,5],[0,21],[0,32],[0,13],[0,29],[0,4],[0,18],[0,12],[5,29],[5,4],[5,12],[5,35],[5,11],[21,32],[21,13],[21,15],[21,9],[21,10],[21,4],[21,12],[21,35],[21,11],[32,15],[32,29],[32,4],[32,12],[32,11],[13,15],[13,9],[13,10],[13,18],[13,12],[15,9],[15,14],[15,10],[15,18],[9,10],[9,29],[9,4],[9,18],[9,35],[14,10],[14,29],[14,4],[14,35],[14,11],[10,11],[29,4],[4,18],[4,11],[12,35],[12,11],[35,11]]
    queries = [[31,0]]
    test = Solution().checkIfPrerequisite(numCourses, prerequisites, queries)

    print(test)
